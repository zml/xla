diff --git a/include/cudnn_frontend.h b/include/cudnn_frontend.h
index e3f1ec8..373e52d 100644
--- a/include/cudnn_frontend.h
+++ b/include/cudnn_frontend.h
@@ -97,7 +97,7 @@
  *      - Simpler samples on how to use the new API.
  */
 
-#include <cudnn.h>
+#include "third_party/gpus/cudnn/cudnn.h"
 
 #include "cudnn_frontend_ConvDesc.h"
 #include "cudnn_frontend_Heuristics.h"
diff --git a/include/cudnn_frontend/backend/backend_descriptor.h b/include/cudnn_frontend/backend/backend_descriptor.h
index 47387a1..3864c1d 100644
--- a/include/cudnn_frontend/backend/backend_descriptor.h
+++ b/include/cudnn_frontend/backend/backend_descriptor.h
@@ -3,7 +3,7 @@
 #include <memory>
 
 #include "../graph_helpers.h"
-#include "cudnn.h"
+#include "third_party/gpus/cudnn/cudnn.h"
 
 namespace cudnn_frontend::detail {
 
diff --git a/include/cudnn_frontend/backend/execution_helpers.h b/include/cudnn_frontend/backend/execution_helpers.h
index 334ffde..d2ca694 100644
--- a/include/cudnn_frontend/backend/execution_helpers.h
+++ b/include/cudnn_frontend/backend/execution_helpers.h
@@ -2,7 +2,7 @@
 
 #include <vector>
 
-#include "cudnn.h"
+#include "third_party/gpus/cudnn/cudnn.h"
 
 #include "backend_descriptor.h"
 
diff --git a/include/cudnn_frontend/backend/plan_helpers.h b/include/cudnn_frontend/backend/plan_helpers.h
index 1fa458d..8c37d10 100644
--- a/include/cudnn_frontend/backend/plan_helpers.h
+++ b/include/cudnn_frontend/backend/plan_helpers.h
@@ -2,7 +2,7 @@
 
 #include <vector>
 
-#include "cudnn.h"
+#include "third_party/gpus/cudnn/cudnn.h"
 
 #include "backend_descriptor.h"
 #include "../knobs.h"

diff --git a/include/cudnn_frontend/node/scaled_dot_product_flash_attention.h b/include/cudnn_frontend/node/scaled_dot_product_flash_attention.h
index 12209a6..8daf423 100644
--- a/include/cudnn_frontend/node/scaled_dot_product_flash_attention.h
+++ b/include/cudnn_frontend/node/scaled_dot_product_flash_attention.h
@@ -202,10 +202,8 @@ class SDPANode : public NodeCRTP<SDPANode> {
         int64_t d_qk = attributes.inputs.at(input_names::Q)->get_dim()[3];
         int64_t d_v  = attributes.inputs.at(input_names::V)->get_dim()[3];

-        bool const is_ragged = attributes.inputs.at(input_names::Q)->get_ragged_offset() ||
-                               attributes.inputs.at(input_names::K)->get_ragged_offset() ||
-                               attributes.inputs.at(input_names::V)->get_ragged_offset() ||
-                               attributes.outputs.at(output_names::O)->get_ragged_offset();
+        bool const is_ragged = attributes.inputs.at(input_names::K)->get_ragged_offset() ||
+                               attributes.inputs.at(input_names::V)->get_ragged_offset();

         auto const& bias_mask = attributes.inputs.find(input_names::Bias);
         bool const is_bias   = (bias_mask != attributes.inputs.end() && bias_mask->second != nullptr);
